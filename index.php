<?php
// Задание 1: Определение простой функции и возвращаемые значения. Создайте функцию multiply, которая принимает два числа в качестве параметров, умножает их и возвращает результат. Функции определяются с помощью ключевого слова function . Для возвращения результата используется return.

// Определение функции multiply
function multiply($a, $b) {
  $result = $a * $b;
  return $result;
 }
 // Вывод результата
 echo multiply(3, 4);

// Задание 2: Область видимости переменных. Создайте переменную $globalVar с числом 50 за пределами функции. Внутри функции sumGlobal создайте локальную переменную $localVar со значением 100 и сложите ее с $globalVar . Выведите результат.

// Определение глобальной переменной $globalVar
$globalVar = 50;
// Определение функции sumGlobal
function sumGlobal() {
 global $globalVar; // Доступ к глобальной переменной внутри функции
 $localVar = 100;
 return $globalVar + $localVar;
}
// Вывод результата
echo sumGlobal();

// Задание 3: Рекурсия. Напишите рекурсивную функцию factorial , которая вычисляет факториал числа. Факториал числа n — это произведение всех чисел от 1 до n.

// Определение функции factorial
function factorial($n) {
  if ($n <= 1) {
  return 1;
  } else {
  return $n * factorial($n - 1); // Рекурсивный вызов функции
  }
 }
 // Вывод результата
 echo factorial(5);

// Задание 4: Анонимные функции. Создайте анонимную функцию, которая принимает строку и выводит её в верхнем регистре. Передайте эту функцию в качестве аргумента для функции array_map для обработки массива строк. Анонимные функции можно определить без имени, используя function. Функция array_map принимает анонимную функцию и массив для обработки.

 // Создание массива строк
 $array = ["apple", "banana", "cherry"];

 // Определение  функции
 $result = array_map(function($str) {
  return strtoupper($str);
  },$array);

 // Вывод результата
 print_r($result);
 
// Задание 5: Стрелочные функции. Напишите стрелочную функцию, которая принимает два числа и возвращает их сумму. Стрелочные функции — это сокращённая форма анонимных функций, записываемая с помощью fn.

// Определение стрелочной функции
$sum = fn($a, $b) => $a + $b;

// Вывод результата
echo $sum(3, 4);

// Задание 6: Замыкания. Создайте функцию counter , которая возвращает замыкание. Замыкание должно увеличивать счётчик на 1 при каждом вызове. Замыкание сохраняет доступ к переменным, объявленным в его внешней области.

// Определение функции counter, которая возвращает замыкание
function counter() {
  $count = 0;
  return function() use (&$count) {
      $count++;
      return $count;
  };
}
$myCounter = counter();
// Вывод результата
echo $myCounter();
echo $myCounter();
echo $myCounter();

// Задание 7: Генераторы и оператор yield. Напишите генератор, который возвращает числа от 1 до 5 с помощью оператора yield. Генераторы используют оператор yield вместо return для возврата значений по одному за раз.

// Определение генератора, который возвращает числа от 1 до 5
function generateNumbers() {
  for ($i = 1; $i <= 5; $i++) {
  yield $i;
  }
 }
 // Создание генератора
 $generator = generateNumbers();
 
 // Итерация по генератору и вывод чисел
 foreach ($generator as $number) {
  echo $number . " ";
 }

// Задание 8: Использование встроенных функций. Используя встроенные функции PHP, найдите минимальное и максимальное значения в массиве чисел. Используйте функции min() и max() для поиска минимальных и максимальных значений.

// Создание массива
$array = [3, 7, 2, 8, 4, 10, 1];

// Нахождение минимального и максимального значений
$minValue = min($array);
$maxValue = max($array);

// Вывод результатов
echo "Минимум: " . $minValue . "\n";
echo "Максимум: " . $maxValue . "\n";